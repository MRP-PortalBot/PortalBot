   # Searching for a banned user with pagination
    @BL.command(description="Search the banned list")
    @app_commands.describe(search_term="The term to search for in the banned list")
    @app_commands.checks.has_role("Realm OP")
    async def search(self, interaction: discord.Interaction, *, search_term: str):
        databaseData = [
            database.MRP_Blacklist_Data.DiscUsername,
            database.MRP_Blacklist_Data.DiscID,
            database.MRP_Blacklist_Data.Gamertag,
            database.MRP_Blacklist_Data.BannedFrom,
            database.MRP_Blacklist_Data.KnownAlts,
            database.MRP_Blacklist_Data.ReasonforBan,
            database.MRP_Blacklist_Data.DateofIncident,
            database.MRP_Blacklist_Data.TypeofBan,
            database.MRP_Blacklist_Data.DatetheBanEnds,
            database.MRP_Blacklist_Data.entryid,
            database.MRP_Blacklist_Data.BanReporter,
        ]

        # Collect all query results matching the search term
        results = []
        for data in databaseData:
            query = database.MRP_Blacklist_Data.select().where(
                data.contains(search_term)
            )

            if query.exists():
                results.extend(query)

        # If no results are found, send a 'No Results' message
        if not results:
            no_results_embed = discord.Embed(
                title="Bannedlist Search",
                description=f"Requested by: {interaction.user.mention}",
                color=0x18C927,
            )
            no_results_embed.add_field(
                name="No Results!", value=f"No results found for '{search_term}'!"
            )
            await interaction.response.send_message(embed=no_results_embed)
            return

        # Paginating banned user data search results (1 user per page)
        async def populate_page(embed: discord.Embed, page: int):
            # Calculate the index for the current page (1 user per page)
            index = page - 1
            page_result = results[index]

            # Clear previous fields in the embed
            embed.clear_fields()

            # Add the current user's data
            embed.add_field(
                name="üîπ Discord Username",
                value=f"`{page_result.DiscUsername}`",
                inline=True,
            )
            embed.add_field(
                name="üîπ Discord ID", value=f"`{page_result.DiscID}`", inline=True
            )
            embed.add_field(
                name="üéÆ Gamertag", value=f"`{page_result.Gamertag}`", inline=True
            )
            embed.add_field(
                name="üè∞ Realm Banned From",
                value=f"`{page_result.BannedFrom}`",
                inline=True,
            )
            embed.add_field(
                name="üë• Known Alts", value=f"`{page_result.KnownAlts}`", inline=True
            )
            embed.add_field(
                name="‚ö†Ô∏è Ban Reason", value=f"`{page_result.ReasonforBan}`", inline=False
            )
            embed.add_field(
                name="üìÖ Date of Incident",
                value=f"`{page_result.DateofIncident}`",
                inline=True,
            )
            embed.add_field(
                name="‚è≥ Type of Ban", value=f"`{page_result.TypeofBan}`", inline=True
            )
            embed.add_field(
                name="‚åõ Ban End Date",
                value=f"`{page_result.DatetheBanEnds if page_result.DatetheBanEnds else 'Permanent'}`",
                inline=True,
            )

            # Update the footer with the current page and entry ID
            embed.set_footer(
                text=f"Entry ID: {page_result.entryid} | Page {page}/{total_pages}"
            )

            return embed

        # Determine total number of pages
        total_pages = len(results)

        # Create the initial embed
        embed = discord.Embed(
            title="Banned User Information",
            description=f"Requested by: {interaction.user.mention}",
            color=0xB10D9F,
        )

        # Start paginating the embed with the results
        await paginate_embed(self.bot, interaction, embed, populate_page, total_pages)

    @BL.command(name="edit", description="Edit a banned list entry")
    @app_commands.checks.has_role("Realm OP")
    async def _edit(
        self,
        interaction: discord.Interaction,
        entry_id: int,
        modify: Literal[
            "Ban Reporter",
            "Discord Username",
            "Discord ID",
            "Gamertag",
            "Realm Banned from",
            "Known Alts",
            "Ban Reason",
            "Date of Incident",
            "Type of Ban",
            "Ban End Date",
        ],
        new_value: str,
    ):
        query = database.MRP_Blacklist_Data.get_or_none(
            database.MRP_Blacklist_Data.entryid == entry_id
        )
        if not query:
            await interaction.response.send_message("Invalid Entry ID", ephemeral=True)
            return

        field_mapping = {
            "Ban Reporter": "BanReporter",
            "Discord Username": "DiscUsername",
            "Discord ID": "DiscID",
            "Gamertag": "Gamertag",
            "Realm Banned from": "BannedFrom",
            "Known Alts": "KnownAlts",
            "Ban Reason": "ReasonforBan",
            "Date of Incident": "DateofIncident",
            "Type of Ban": "TypeofBan",
            "Ban End Date": "DatetheBanEnds",
        }

        # Dynamically update the selected field
        setattr(query, field_mapping[modify], new_value)
        query.save()

        await interaction.response.send_message(f"Modified {modify} to {new_value}.")